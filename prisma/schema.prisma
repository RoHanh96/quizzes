// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id                String             @id @default(cuid())
  title            String
  type             String             // "multiple_choice" | "crossword_basic" | "crossword_advanced"
  verticalWord     String?            // For crossword_basic
  secretWord       String?            // For crossword_advanced secret word
  imageUrl         String?            // For crossword_advanced
  shareLink        String?            @unique
  crosswordQuestions CrosswordQuestion[]
  multipleChoiceQuestions MultipleChoiceQuestion[]
  creatorId        String
  creator          User               @relation(fields: [creatorId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model CrosswordQuestion {
  id       String  @id @default(cuid())
  question String
  answer   String
  order    Int
  position Int     @default(0)
  letterIndex Int  @default(0)
  quiz     Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MultipleChoiceQuestion {
  id          String   @id @default(cuid())
  question    String
  options     String   // JSON array of options
  answer      Int      // Index of correct answer
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
